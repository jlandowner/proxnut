name: Release üöÄ

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name (e.g., v1.0.0)"
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      tag: ${{ steps.validate-tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        id: validate-tag
        run: |
          TAG="${{ github.event.inputs.tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
            echo "Error: Tag must follow semantic versioning format (e.g., v1.0.0, v1.0.0-beta.1)"
            exit 1
          fi

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Error: Tag $TAG already exists"
            exit 1
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Tag format is valid: $TAG"

      - name: Generate release notes
        id: release-notes
        run: |
          TAG="${{ steps.validate-tag.outputs.tag }}"

          # Get the latest tag (if any) for comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          echo "## Release $TAG" > release_notes.md
          echo "" >> release_notes.md

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
          else
            echo "### Changes in this release" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" --max-count=10 >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "### Docker Image" >> release_notes.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG\`" >> release_notes.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> release_notes.md

          echo "üìù Generated release notes:"
          cat release_notes.md

      - name: Create git tag
        run: |
          TAG="${{ steps.validate-tag.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "‚úÖ Created and pushed tag: $TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.validate-tag.outputs.tag }}
          name: Release ${{ steps.validate-tag.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.validate-tag.outputs.tag, '-') }}

  build-and-push:
    needs: create-tag-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag-and-release.outputs.tag }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.create-tag-and-release.outputs.tag }}
            type=raw,value=latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update release with Docker image info
        run: |
          echo "üê≥ Docker image published successfully:"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-tag-and-release.outputs.tag }}"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
